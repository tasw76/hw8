[
  {
    "objectID": "hw8.html",
    "href": "hw8.html",
    "title": "hw8",
    "section": "",
    "text": "library(readr)\n\nWarning: package 'readr' was built under R version 4.3.3\n\nlibrary(dplyr)\n\nWarning: package 'dplyr' was built under R version 4.3.1\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n# read in data, argument added in the call to read_csv. fixed error for data with Western European characters\ndata1 &lt;- read_csv(\"SeoulBikeData.csv\", locale=locale(encoding=\"latin1\"))\n\nRows: 8760 Columns: 14\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Date, Seasons, Holiday, Functioning Day\ndbl (10): Rented Bike Count, Hour, Temperature(°C), Humidity(%), Wind speed ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndata1\n\n# A tibble: 8,760 × 14\n   Date      `Rented Bike Count`  Hour `Temperature(°C)` `Humidity(%)`\n   &lt;chr&gt;                   &lt;dbl&gt; &lt;dbl&gt;             &lt;dbl&gt;         &lt;dbl&gt;\n 1 1/12/2017                 254     0              -5.2            37\n 2 1/12/2017                 204     1              -5.5            38\n 3 1/12/2017                 173     2              -6              39\n 4 1/12/2017                 107     3              -6.2            40\n 5 1/12/2017                  78     4              -6              36\n 6 1/12/2017                 100     5              -6.4            37\n 7 1/12/2017                 181     6              -6.6            35\n 8 1/12/2017                 460     7              -7.4            38\n 9 1/12/2017                 930     8              -7.6            37\n10 1/12/2017                 490     9              -6.5            27\n# ℹ 8,750 more rows\n# ℹ 9 more variables: `Wind speed (m/s)` &lt;dbl&gt;, `Visibility (10m)` &lt;dbl&gt;,\n#   `Dew point temperature(°C)` &lt;dbl&gt;, `Solar Radiation (MJ/m2)` &lt;dbl&gt;,\n#   `Rainfall(mm)` &lt;dbl&gt;, `Snowfall (cm)` &lt;dbl&gt;, Seasons &lt;chr&gt;, Holiday &lt;chr&gt;,\n#   `Functioning Day` &lt;chr&gt;"
  },
  {
    "objectID": "hw8.html#reading-data",
    "href": "hw8.html#reading-data",
    "title": "hw8",
    "section": "",
    "text": "library(readr)\n\nWarning: package 'readr' was built under R version 4.3.3\n\nlibrary(dplyr)\n\nWarning: package 'dplyr' was built under R version 4.3.1\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n# read in data, argument added in the call to read_csv. fixed error for data with Western European characters\ndata1 &lt;- read_csv(\"SeoulBikeData.csv\", locale=locale(encoding=\"latin1\"))\n\nRows: 8760 Columns: 14\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Date, Seasons, Holiday, Functioning Day\ndbl (10): Rented Bike Count, Hour, Temperature(°C), Humidity(%), Wind speed ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndata1\n\n# A tibble: 8,760 × 14\n   Date      `Rented Bike Count`  Hour `Temperature(°C)` `Humidity(%)`\n   &lt;chr&gt;                   &lt;dbl&gt; &lt;dbl&gt;             &lt;dbl&gt;         &lt;dbl&gt;\n 1 1/12/2017                 254     0              -5.2            37\n 2 1/12/2017                 204     1              -5.5            38\n 3 1/12/2017                 173     2              -6              39\n 4 1/12/2017                 107     3              -6.2            40\n 5 1/12/2017                  78     4              -6              36\n 6 1/12/2017                 100     5              -6.4            37\n 7 1/12/2017                 181     6              -6.6            35\n 8 1/12/2017                 460     7              -7.4            38\n 9 1/12/2017                 930     8              -7.6            37\n10 1/12/2017                 490     9              -6.5            27\n# ℹ 8,750 more rows\n# ℹ 9 more variables: `Wind speed (m/s)` &lt;dbl&gt;, `Visibility (10m)` &lt;dbl&gt;,\n#   `Dew point temperature(°C)` &lt;dbl&gt;, `Solar Radiation (MJ/m2)` &lt;dbl&gt;,\n#   `Rainfall(mm)` &lt;dbl&gt;, `Snowfall (cm)` &lt;dbl&gt;, Seasons &lt;chr&gt;, Holiday &lt;chr&gt;,\n#   `Functioning Day` &lt;chr&gt;"
  },
  {
    "objectID": "hw8.html#eda",
    "href": "hw8.html#eda",
    "title": "hw8",
    "section": "EDA",
    "text": "EDA\n\nChecking the data\n\n# 1. check for missingness\nsum(is.na(data1))\n\n[1] 0\n\ncolSums(is.na(data1))\n\n                     Date         Rented Bike Count                      Hour \n                        0                         0                         0 \n          Temperature(°C)               Humidity(%)          Wind speed (m/s) \n                        0                         0                         0 \n         Visibility (10m) Dew point temperature(°C)   Solar Radiation (MJ/m2) \n                        0                         0                         0 \n             Rainfall(mm)             Snowfall (cm)                   Seasons \n                        0                         0                         0 \n                  Holiday           Functioning Day \n                        0                         0 \n\n# 2. Check the column types \n# Basic summary stats for numeric columns\nstr(data1)\n\nspc_tbl_ [8,760 × 14] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Date                     : chr [1:8760] \"1/12/2017\" \"1/12/2017\" \"1/12/2017\" \"1/12/2017\" ...\n $ Rented Bike Count        : num [1:8760] 254 204 173 107 78 100 181 460 930 490 ...\n $ Hour                     : num [1:8760] 0 1 2 3 4 5 6 7 8 9 ...\n $ Temperature(°C)          : num [1:8760] -5.2 -5.5 -6 -6.2 -6 -6.4 -6.6 -7.4 -7.6 -6.5 ...\n $ Humidity(%)              : num [1:8760] 37 38 39 40 36 37 35 38 37 27 ...\n $ Wind speed (m/s)         : num [1:8760] 2.2 0.8 1 0.9 2.3 1.5 1.3 0.9 1.1 0.5 ...\n $ Visibility (10m)         : num [1:8760] 2000 2000 2000 2000 2000 ...\n $ Dew point temperature(°C): num [1:8760] -17.6 -17.6 -17.7 -17.6 -18.6 -18.7 -19.5 -19.3 -19.8 -22.4 ...\n $ Solar Radiation (MJ/m2)  : num [1:8760] 0 0 0 0 0 0 0 0 0.01 0.23 ...\n $ Rainfall(mm)             : num [1:8760] 0 0 0 0 0 0 0 0 0 0 ...\n $ Snowfall (cm)            : num [1:8760] 0 0 0 0 0 0 0 0 0 0 ...\n $ Seasons                  : chr [1:8760] \"Winter\" \"Winter\" \"Winter\" \"Winter\" ...\n $ Holiday                  : chr [1:8760] \"No Holiday\" \"No Holiday\" \"No Holiday\" \"No Holiday\" ...\n $ Functioning Day          : chr [1:8760] \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Date = col_character(),\n  ..   `Rented Bike Count` = col_double(),\n  ..   Hour = col_double(),\n  ..   `Temperature(°C)` = col_double(),\n  ..   `Humidity(%)` = col_double(),\n  ..   `Wind speed (m/s)` = col_double(),\n  ..   `Visibility (10m)` = col_double(),\n  ..   `Dew point temperature(°C)` = col_double(),\n  ..   `Solar Radiation (MJ/m2)` = col_double(),\n  ..   `Rainfall(mm)` = col_double(),\n  ..   `Snowfall (cm)` = col_double(),\n  ..   Seasons = col_character(),\n  ..   Holiday = col_character(),\n  ..   `Functioning Day` = col_character()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n# Summary statistics for numeric columns\nnumeric_cols &lt;- sapply(data1, is.numeric)\n\nsummary(data1[, numeric_cols])\n\n Rented Bike Count      Hour       Temperature(°C)   Humidity(%)   \n Min.   :   0.0    Min.   : 0.00   Min.   :-17.80   Min.   : 0.00  \n 1st Qu.: 191.0    1st Qu.: 5.75   1st Qu.:  3.50   1st Qu.:42.00  \n Median : 504.5    Median :11.50   Median : 13.70   Median :57.00  \n Mean   : 704.6    Mean   :11.50   Mean   : 12.88   Mean   :58.23  \n 3rd Qu.:1065.2    3rd Qu.:17.25   3rd Qu.: 22.50   3rd Qu.:74.00  \n Max.   :3556.0    Max.   :23.00   Max.   : 39.40   Max.   :98.00  \n Wind speed (m/s) Visibility (10m) Dew point temperature(°C)\n Min.   :0.000    Min.   :  27     Min.   :-30.600          \n 1st Qu.:0.900    1st Qu.: 940     1st Qu.: -4.700          \n Median :1.500    Median :1698     Median :  5.100          \n Mean   :1.725    Mean   :1437     Mean   :  4.074          \n 3rd Qu.:2.300    3rd Qu.:2000     3rd Qu.: 14.800          \n Max.   :7.400    Max.   :2000     Max.   : 27.200          \n Solar Radiation (MJ/m2)  Rainfall(mm)     Snowfall (cm)    \n Min.   :0.0000          Min.   : 0.0000   Min.   :0.00000  \n 1st Qu.:0.0000          1st Qu.: 0.0000   1st Qu.:0.00000  \n Median :0.0100          Median : 0.0000   Median :0.00000  \n Mean   :0.5691          Mean   : 0.1487   Mean   :0.07507  \n 3rd Qu.:0.9300          3rd Qu.: 0.0000   3rd Qu.:0.00000  \n Max.   :3.5200          Max.   :35.0000   Max.   :8.80000  \n\n# Check the unique values for the categorical variables\n# Identify categorical variables (character or factor columns)\ncategorical_cols &lt;- sapply(data1, function(x) is.character(x) || is.factor(x))\n\n# List unique values for each categorical variable (#Date variable has many unique values. They are also inconsistent)\nlapply(data1[, categorical_cols], unique)\n\n$Date\n  [1] \"1/12/2017\"  \"2/12/2017\"  \"3/12/2017\"  \"4/12/2017\"  \"5/12/2017\" \n  [6] \"6/12/2017\"  \"7/12/2017\"  \"8/12/2017\"  \"9/12/2017\"  \"10/12/2017\"\n [11] \"11/12/2017\" \"12/12/2017\" \"13/12/2017\" \"14/12/2017\" \"15/12/2017\"\n [16] \"16/12/2017\" \"17/12/2017\" \"18/12/2017\" \"19/12/2017\" \"20/12/2017\"\n [21] \"21/12/2017\" \"22/12/2017\" \"23/12/2017\" \"24/12/2017\" \"25/12/2017\"\n [26] \"26/12/2017\" \"27/12/2017\" \"28/12/2017\" \"29/12/2017\" \"30/12/2017\"\n [31] \"31/12/2017\" \"1/1/2018\"   \"2/1/2018\"   \"3/1/2018\"   \"4/1/2018\"  \n [36] \"5/1/2018\"   \"6/1/2018\"   \"7/1/2018\"   \"8/1/2018\"   \"9/1/2018\"  \n [41] \"10/1/2018\"  \"11/1/2018\"  \"12/1/2018\"  \"13/01/2018\" \"14/01/2018\"\n [46] \"15/01/2018\" \"16/01/2018\" \"17/01/2018\" \"18/01/2018\" \"19/01/2018\"\n [51] \"20/01/2018\" \"21/01/2018\" \"22/01/2018\" \"23/01/2018\" \"24/01/2018\"\n [56] \"25/01/2018\" \"26/01/2018\" \"27/01/2018\" \"28/01/2018\" \"29/01/2018\"\n [61] \"30/01/2018\" \"31/01/2018\" \"1/2/2018\"   \"2/2/2018\"   \"3/2/2018\"  \n [66] \"4/2/2018\"   \"5/2/2018\"   \"6/2/2018\"   \"7/2/2018\"   \"8/2/2018\"  \n [71] \"9/2/2018\"   \"10/2/2018\"  \"11/2/2018\"  \"12/2/2018\"  \"13/02/2018\"\n [76] \"14/02/2018\" \"15/02/2018\" \"16/02/2018\" \"17/02/2018\" \"18/02/2018\"\n [81] \"19/02/2018\" \"20/02/2018\" \"21/02/2018\" \"22/02/2018\" \"23/02/2018\"\n [86] \"24/02/2018\" \"25/02/2018\" \"26/02/2018\" \"27/02/2018\" \"28/02/2018\"\n [91] \"1/3/2018\"   \"2/3/2018\"   \"3/3/2018\"   \"4/3/2018\"   \"5/3/2018\"  \n [96] \"6/3/2018\"   \"7/3/2018\"   \"8/3/2018\"   \"9/3/2018\"   \"10/3/2018\" \n[101] \"11/3/2018\"  \"12/3/2018\"  \"13/03/2018\" \"14/03/2018\" \"15/03/2018\"\n[106] \"16/03/2018\" \"17/03/2018\" \"18/03/2018\" \"19/03/2018\" \"20/03/2018\"\n[111] \"21/03/2018\" \"22/03/2018\" \"23/03/2018\" \"24/03/2018\" \"25/03/2018\"\n[116] \"26/03/2018\" \"27/03/2018\" \"28/03/2018\" \"29/03/2018\" \"30/03/2018\"\n[121] \"31/03/2018\" \"1/4/2018\"   \"2/4/2018\"   \"3/4/2018\"   \"4/4/2018\"  \n[126] \"5/4/2018\"   \"6/4/2018\"   \"7/4/2018\"   \"8/4/2018\"   \"9/4/2018\"  \n[131] \"10/4/2018\"  \"11/4/2018\"  \"12/4/2018\"  \"13/04/2018\" \"14/04/2018\"\n[136] \"15/04/2018\" \"16/04/2018\" \"17/04/2018\" \"18/04/2018\" \"19/04/2018\"\n[141] \"20/04/2018\" \"21/04/2018\" \"22/04/2018\" \"23/04/2018\" \"24/04/2018\"\n[146] \"25/04/2018\" \"26/04/2018\" \"27/04/2018\" \"28/04/2018\" \"29/04/2018\"\n[151] \"30/04/2018\" \"1/5/2018\"   \"2/5/2018\"   \"3/5/2018\"   \"4/5/2018\"  \n[156] \"5/5/2018\"   \"6/5/2018\"   \"7/5/2018\"   \"8/5/2018\"   \"9/5/2018\"  \n[161] \"10/5/2018\"  \"11/5/2018\"  \"12/5/2018\"  \"13/05/2018\" \"14/05/2018\"\n[166] \"15/05/2018\" \"16/05/2018\" \"17/05/2018\" \"18/05/2018\" \"19/05/2018\"\n[171] \"20/05/2018\" \"21/05/2018\" \"22/05/2018\" \"23/05/2018\" \"24/05/2018\"\n[176] \"25/05/2018\" \"26/05/2018\" \"27/05/2018\" \"28/05/2018\" \"29/05/2018\"\n[181] \"30/05/2018\" \"31/05/2018\" \"1/6/2018\"   \"2/6/2018\"   \"3/6/2018\"  \n[186] \"4/6/2018\"   \"5/6/2018\"   \"6/6/2018\"   \"7/6/2018\"   \"8/6/2018\"  \n[191] \"9/6/2018\"   \"10/6/2018\"  \"11/6/2018\"  \"12/6/2018\"  \"13/06/2018\"\n[196] \"14/06/2018\" \"15/06/2018\" \"16/06/2018\" \"17/06/2018\" \"18/06/2018\"\n[201] \"19/06/2018\" \"20/06/2018\" \"21/06/2018\" \"22/06/2018\" \"23/06/2018\"\n[206] \"24/06/2018\" \"25/06/2018\" \"26/06/2018\" \"27/06/2018\" \"28/06/2018\"\n[211] \"29/06/2018\" \"30/06/2018\" \"1/7/2018\"   \"2/7/2018\"   \"3/7/2018\"  \n[216] \"4/7/2018\"   \"5/7/2018\"   \"6/7/2018\"   \"7/7/2018\"   \"8/7/2018\"  \n[221] \"9/7/2018\"   \"10/7/2018\"  \"11/7/2018\"  \"12/7/2018\"  \"13/07/2018\"\n[226] \"14/07/2018\" \"15/07/2018\" \"16/07/2018\" \"17/07/2018\" \"18/07/2018\"\n[231] \"19/07/2018\" \"20/07/2018\" \"21/07/2018\" \"22/07/2018\" \"23/07/2018\"\n[236] \"24/07/2018\" \"25/07/2018\" \"26/07/2018\" \"27/07/2018\" \"28/07/2018\"\n[241] \"29/07/2018\" \"30/07/2018\" \"31/07/2018\" \"1/8/2018\"   \"2/8/2018\"  \n[246] \"3/8/2018\"   \"4/8/2018\"   \"5/8/2018\"   \"6/8/2018\"   \"7/8/2018\"  \n[251] \"8/8/2018\"   \"9/8/2018\"   \"10/8/2018\"  \"11/8/2018\"  \"12/8/2018\" \n[256] \"13/08/2018\" \"14/08/2018\" \"15/08/2018\" \"16/08/2018\" \"17/08/2018\"\n[261] \"18/08/2018\" \"19/08/2018\" \"20/08/2018\" \"21/08/2018\" \"22/08/2018\"\n[266] \"23/08/2018\" \"24/08/2018\" \"25/08/2018\" \"26/08/2018\" \"27/08/2018\"\n[271] \"28/08/2018\" \"29/08/2018\" \"30/08/2018\" \"31/08/2018\" \"1/9/2018\"  \n[276] \"2/9/2018\"   \"3/9/2018\"   \"4/9/2018\"   \"5/9/2018\"   \"6/9/2018\"  \n[281] \"7/9/2018\"   \"8/9/2018\"   \"9/9/2018\"   \"10/9/2018\"  \"11/9/2018\" \n[286] \"12/9/2018\"  \"13/09/2018\" \"14/09/2018\" \"15/09/2018\" \"16/09/2018\"\n[291] \"17/09/2018\" \"18/09/2018\" \"19/09/2018\" \"20/09/2018\" \"21/09/2018\"\n[296] \"22/09/2018\" \"23/09/2018\" \"24/09/2018\" \"25/09/2018\" \"26/09/2018\"\n[301] \"27/09/2018\" \"28/09/2018\" \"29/09/2018\" \"30/09/2018\" \"1/10/2018\" \n[306] \"2/10/2018\"  \"3/10/2018\"  \"4/10/2018\"  \"5/10/2018\"  \"6/10/2018\" \n[311] \"7/10/2018\"  \"8/10/2018\"  \"9/10/2018\"  \"10/10/2018\" \"11/10/2018\"\n[316] \"12/10/2018\" \"13/10/2018\" \"14/10/2018\" \"15/10/2018\" \"16/10/2018\"\n[321] \"17/10/2018\" \"18/10/2018\" \"19/10/2018\" \"20/10/2018\" \"21/10/2018\"\n[326] \"22/10/2018\" \"23/10/2018\" \"24/10/2018\" \"25/10/2018\" \"26/10/2018\"\n[331] \"27/10/2018\" \"28/10/2018\" \"29/10/2018\" \"30/10/2018\" \"31/10/2018\"\n[336] \"1/11/2018\"  \"2/11/2018\"  \"3/11/2018\"  \"4/11/2018\"  \"5/11/2018\" \n[341] \"6/11/2018\"  \"7/11/2018\"  \"8/11/2018\"  \"9/11/2018\"  \"10/11/2018\"\n[346] \"11/11/2018\" \"12/11/2018\" \"13/11/2018\" \"14/11/2018\" \"15/11/2018\"\n[351] \"16/11/2018\" \"17/11/2018\" \"18/11/2018\" \"19/11/2018\" \"20/11/2018\"\n[356] \"21/11/2018\" \"22/11/2018\" \"23/11/2018\" \"24/11/2018\" \"25/11/2018\"\n[361] \"26/11/2018\" \"27/11/2018\" \"28/11/2018\" \"29/11/2018\" \"30/11/2018\"\n\n$Seasons\n[1] \"Winter\" \"Spring\" \"Summer\" \"Autumn\"\n\n$Holiday\n[1] \"No Holiday\" \"Holiday\"   \n\n$`Functioning Day`\n[1] \"Yes\" \"No\" \n\n# 3. Convert the Date column into an actual date, name it parsed_date\nlibrary(lubridate)\n\nWarning: package 'lubridate' was built under R version 4.3.3\n\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\n# make sure Date column is a character vector\ndata1$Date &lt;- as.character(data1$Date)\nstr(data1$Date)   # show as a character vector\n\n chr [1:8760] \"1/12/2017\" \"1/12/2017\" \"1/12/2017\" \"1/12/2017\" \"1/12/2017\" ...\n\n# convert the Date column into an actual date. 5304 failed to convert. Use the dmy() to convert. \ndata1$Parsed_Date &lt;- mdy(data1$Date)\n\nWarning: 5304 failed to parse.\n\ndata1$Parsed_Date[is.na(data1$Parsed_Date)] &lt;- dmy(data1$Date[is.na(data1$Parsed_Date)])\n# check results and the new column Parsed_Date and it got all actual dates.\nhead(data1, 350)\n\n# A tibble: 350 × 15\n   Date      `Rented Bike Count`  Hour `Temperature(°C)` `Humidity(%)`\n   &lt;chr&gt;                   &lt;dbl&gt; &lt;dbl&gt;             &lt;dbl&gt;         &lt;dbl&gt;\n 1 1/12/2017                 254     0              -5.2            37\n 2 1/12/2017                 204     1              -5.5            38\n 3 1/12/2017                 173     2              -6              39\n 4 1/12/2017                 107     3              -6.2            40\n 5 1/12/2017                  78     4              -6              36\n 6 1/12/2017                 100     5              -6.4            37\n 7 1/12/2017                 181     6              -6.6            35\n 8 1/12/2017                 460     7              -7.4            38\n 9 1/12/2017                 930     8              -7.6            37\n10 1/12/2017                 490     9              -6.5            27\n# ℹ 340 more rows\n# ℹ 10 more variables: `Wind speed (m/s)` &lt;dbl&gt;, `Visibility (10m)` &lt;dbl&gt;,\n#   `Dew point temperature(°C)` &lt;dbl&gt;, `Solar Radiation (MJ/m2)` &lt;dbl&gt;,\n#   `Rainfall(mm)` &lt;dbl&gt;, `Snowfall (cm)` &lt;dbl&gt;, Seasons &lt;chr&gt;, Holiday &lt;chr&gt;,\n#   `Functioning Day` &lt;chr&gt;, Parsed_Date &lt;date&gt;\n\n# 4. Convert character variables into factors\ndata1$Seasons &lt;- as.factor(data1$Seasons)\ndata1$Holiday &lt;- as.factor(data1$Holiday)\ndata1$`Functioning Day` &lt;- as.factor(data1$`Functioning Day`)  # Replace with exact column name\n\nhead(data1)   # check the results confirming these three are factors\n\n# A tibble: 6 × 15\n  Date      `Rented Bike Count`  Hour `Temperature(°C)` `Humidity(%)`\n  &lt;chr&gt;                   &lt;dbl&gt; &lt;dbl&gt;             &lt;dbl&gt;         &lt;dbl&gt;\n1 1/12/2017                 254     0              -5.2            37\n2 1/12/2017                 204     1              -5.5            38\n3 1/12/2017                 173     2              -6              39\n4 1/12/2017                 107     3              -6.2            40\n5 1/12/2017                  78     4              -6              36\n6 1/12/2017                 100     5              -6.4            37\n# ℹ 10 more variables: `Wind speed (m/s)` &lt;dbl&gt;, `Visibility (10m)` &lt;dbl&gt;,\n#   `Dew point temperature(°C)` &lt;dbl&gt;, `Solar Radiation (MJ/m2)` &lt;dbl&gt;,\n#   `Rainfall(mm)` &lt;dbl&gt;, `Snowfall (cm)` &lt;dbl&gt;, Seasons &lt;fct&gt;, Holiday &lt;fct&gt;,\n#   `Functioning Day` &lt;fct&gt;, Parsed_Date &lt;date&gt;\n\n# 5. Rename all variables to lower snake case\nlibrary(janitor)\n\nWarning: package 'janitor' was built under R version 4.3.3\n\n\n\nAttaching package: 'janitor'\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\ndata1 &lt;- data1 %&gt;% clean_names()\n\n\n# 6. Create summary statistics\nsummary(data1$rented_bike_count)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    0.0   191.0   504.5   704.6  1065.2  3556.0 \n\n# Summarize bike rentals by seasons\ndata1 %&gt;%\n  group_by(seasons) %&gt;%\n  summarize(\n    mean_rentals = mean(rented_bike_count),\n    total_rentals = sum(rented_bike_count)\n  )\n\n# A tibble: 4 × 3\n  seasons mean_rentals total_rentals\n  &lt;fct&gt;          &lt;dbl&gt;         &lt;dbl&gt;\n1 Autumn          820.       1790002\n2 Spring          730.       1611909\n3 Summer         1034.       2283234\n4 Winter          226.        487169\n\n# Summarize bike rentals by holidays\n\ndata1 %&gt;%\n  group_by(holiday) %&gt;%\n  summarize(\n    mean_rentals = mean(rented_bike_count),\n    total_rentals = sum(rented_bike_count)\n  )\n\n# A tibble: 2 × 3\n  holiday    mean_rentals total_rentals\n  &lt;fct&gt;             &lt;dbl&gt;         &lt;dbl&gt;\n1 Holiday            500.        215895\n2 No Holiday         715.       5956419\n\n# Summarize bike rentals by functioning day\ndata1 %&gt;%\n  group_by(functioning_day) %&gt;%\n  summarize(\n    mean_rentals = mean(rented_bike_count),\n    total_rentals = sum(rented_bike_count)\n  )\n\n# A tibble: 2 × 3\n  functioning_day mean_rentals total_rentals\n  &lt;fct&gt;                  &lt;dbl&gt;         &lt;dbl&gt;\n1 No                        0              0\n2 Yes                     729.       6172314\n\n# subset data based on functioning day takes values of 'No' and 'Yes'\noperational_data1 &lt;- data1 %&gt;%\n  filter(functioning_day == \"Yes\")\n\n# Verify the subset (8465 obs remain)\ntable(operational_data1$functioning_day)\n\n\n  No  Yes \n   0 8465 \n\n# 7. summarize across the hours. Use group_by(). Use: date, seasons, and holiday variables.\n# Create a new summarized dataset\nsummarized_data1 &lt;- data1 %&gt;%\n  group_by(parsed_date, seasons, holiday) %&gt;%\n  summarize(\n    # Sum of bike_count, rainfall, and snowfall\n    total_bike_count = sum(rented_bike_count),\n    total_rainfall = sum(rainfall_mm),\n    total_snowfall = sum(snowfall_cm),\n    \n    # Mean of weather-related variables\n    mean_temperature = mean(temperature_c),\n    mean_humidity = mean(humidity_percent),\n    mean_wind_speed = mean(wind_speed_m_s),\n    mean_visibility = mean(visibility_10m),\n    mean_dew_point_temperature = mean(dew_point_temperature_c)\n  )\n\n`summarise()` has grouped output by 'parsed_date', 'seasons'. You can override\nusing the `.groups` argument.\n\n# View the summarized dataset\nhead(summarized_data1, 300)\n\n# A tibble: 300 × 11\n# Groups:   parsed_date, seasons [300]\n   parsed_date seasons holiday    total_bike_count total_rainfall total_snowfall\n   &lt;date&gt;      &lt;fct&gt;   &lt;fct&gt;                 &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n 1 2017-01-12  Winter  No Holiday             9539            0              0  \n 2 2017-02-12  Winter  No Holiday             8523            0              0  \n 3 2017-03-12  Winter  No Holiday             7222            4              0  \n 4 2017-04-12  Winter  No Holiday             8729            0.1            0  \n 5 2017-05-12  Winter  No Holiday             8307            0              0  \n 6 2017-06-12  Winter  No Holiday             6669            1.3            8.6\n 7 2017-07-12  Winter  No Holiday             8549            0             10.4\n 8 2017-08-12  Winter  No Holiday             8032            0              0  \n 9 2017-09-12  Winter  No Holiday             7233            0              0  \n10 2017-10-12  Winter  No Holiday             3453            4.1           32.5\n# ℹ 290 more rows\n# ℹ 5 more variables: mean_temperature &lt;dbl&gt;, mean_humidity &lt;dbl&gt;,\n#   mean_wind_speed &lt;dbl&gt;, mean_visibility &lt;dbl&gt;,\n#   mean_dew_point_temperature &lt;dbl&gt;\n\n# 8. Recreate basic summary stats and then create some plots. Report correlation between numeric variables \n# Summary statistics for all numeric variables\nsummary(summarized_data1)\n\n  parsed_date           seasons         holiday    total_bike_count\n Min.   :2017-01-12   Autumn:91   Holiday   : 18   Min.   :    0   \n 1st Qu.:2018-03-04   Spring:92   No Holiday:347   1st Qu.: 6500   \n Median :2018-06-06   Summer:92                    Median :17730   \n Mean   :2018-06-01   Winter:90                    Mean   :16910   \n 3rd Qu.:2018-09-08                                3rd Qu.:26075   \n Max.   :2018-12-11                                Max.   :36149   \n total_rainfall   total_snowfall   mean_temperature  mean_humidity  \n Min.   : 0.000   Min.   : 0.000   Min.   :-14.738   Min.   :22.25  \n 1st Qu.: 0.000   1st Qu.: 0.000   1st Qu.:  3.812   1st Qu.:47.92  \n Median : 0.000   Median : 0.000   Median : 13.838   Median :57.21  \n Mean   : 3.568   Mean   : 1.802   Mean   : 12.883   Mean   :58.23  \n 3rd Qu.: 0.500   3rd Qu.: 0.000   3rd Qu.: 22.425   3rd Qu.:67.54  \n Max.   :95.500   Max.   :78.700   Max.   : 33.742   Max.   :95.88  \n mean_wind_speed  mean_visibility  mean_dew_point_temperature\n Min.   :0.6625   Min.   : 214.3   Min.   :-27.750           \n 1st Qu.:1.2958   1st Qu.:1087.5   1st Qu.: -4.862           \n Median :1.6417   Median :1557.8   Median :  5.008           \n Mean   :1.7249   Mean   :1436.8   Mean   :  4.074           \n 3rd Qu.:1.9542   3rd Qu.:1877.2   3rd Qu.: 14.571           \n Max.   :4.0000   Max.   :2000.0   Max.   : 25.038           \n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n# Scatter plot: Bike count vs. Temperature. There seems to have some outlier in 'total_bike_count'\nggplot(summarized_data1, aes(x = mean_temperature, y = total_bike_count)) +\n  geom_point(alpha = 0.6) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"blue\") +\n  labs(title = \"Bike Count vs. Temperature\", x = \"Mean Temperature (°C)\", y = \"Total Bike Count\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n# Scatter plot: Bike count vs. Humidity. There seems to have some outliers in 'total_bike_count'\nggplot(summarized_data1, aes(x = mean_humidity, y = total_bike_count)) +\n  geom_point(alpha = 0.6) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"blue\") +\n  labs(title = \"Bike Count vs. Humidity\", x = \"Mean Humidity (%)\", y = \"Total Bike Count\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n# Select several relevant numeric variables\nnumeric_data &lt;- summarized_data1 %&gt;%\n  ungroup() %&gt;%  # Temporarily remove grouping\n  select(total_bike_count, total_rainfall, total_snowfall, mean_temperature, mean_humidity, mean_wind_speed, mean_visibility)\n\n# Correlation matrix. Only keep 3 decimal places as the accuracy is not that high\ncor_matrix &lt;- round(cor(numeric_data, use = \"complete.obs\"), 3)  # Compute correlations\nprint(cor_matrix)\n\n                 total_bike_count total_rainfall total_snowfall\ntotal_bike_count            1.000         -0.214         -0.241\ntotal_rainfall             -0.214          1.000         -0.022\ntotal_snowfall             -0.241         -0.022          1.000\nmean_temperature            0.700          0.140         -0.268\nmean_humidity               0.028          0.528          0.064\nmean_wind_speed            -0.175         -0.081          0.021\nmean_visibility             0.145         -0.218         -0.101\n                 mean_temperature mean_humidity mean_wind_speed mean_visibility\ntotal_bike_count            0.700         0.028          -0.175           0.145\ntotal_rainfall              0.140         0.528          -0.081          -0.218\ntotal_snowfall             -0.268         0.064           0.021          -0.101\nmean_temperature            1.000         0.401          -0.259           0.011\nmean_humidity               0.401         1.000          -0.224          -0.556\nmean_wind_speed            -0.259        -0.224           1.000           0.190\nmean_visibility             0.011        -0.556           0.190           1.000\n\n\n\n\nSplit the data\n\n# install.packages(\"tidymodels\")\n# library(tidymodels)\n# library(rsample)\n# \n# # Perform a stratified split on the seasons variable\n# set.seed(123)  # For reproducibility\n# data_split &lt;- initial_split(numeric_data, prop = 0.75, strata = seasons)\n# \n# # Extract training and testing sets\n# training_data &lt;- training(data_split)\n# testing_data &lt;- testing(data_split)\n# \n# # Check the distribution in training and test sets\n# table(training_data$seasons)\n# table(testing_data$seasons)\n# \n# remove.packages(\"cli\")\n# install.packages(\"cli\")\n# \n# \n# # Check the structure of the dataset\n# str(data)\n# # Summary statistics for all columns\n# summary(data)\n# \n# # For numeric columns only\n# numeric_cols &lt;- sapply(data, is.numeric)\n# summary(data[, numeric_cols])\n# \n# # Identify categorical variables (character or factor columns)\n# categorical_cols &lt;- sapply(data, function(x) is.character(x) || is.factor(x))\n# \n# # List unique values for each categorical variable\n# lapply(data[, categorical_cols], unique)\n\n\n\nFitting MLR models\n\n# Summary table for numeric columns"
  }
]